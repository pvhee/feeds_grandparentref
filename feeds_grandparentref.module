<?php
// $Id$

/**
* @file
* On behalf implementation of Feeds mapping API for nodereference.module (CCK).
*/

// The CCK field name should contain this string to be considered
define('FEEDS_GRANDPARENTREF_FIELDNAME', 'grandparentref');

/**
* Implementation of hook_feeds_node_processor_targets_alter().
*
* @see FeedsNodeProcessor::getMappingTargets().
*/

function feeds_grandparentref_feeds_node_processor_targets_alter(&$targets, $content_type) {
  $info = content_types($content_type);
  $fields = array();
  if (isset($info['fields']) && count($info['fields'])) {
    foreach ($info['fields'] as $field_name => $field) {
      if (in_array($field['type'], array('nodereference'))) {
        // only consider field names with this string
        if (strstr($field_name, FEEDS_GRANDPARENTREF_FIELDNAME)) {
          $fields[$field_name] = isset($field['widget']['label']) ? $field['widget']['label'] : $field_name;
        }
      }
    }
  }
  foreach ($fields as $k => $name) {
    $name .= ' (Grandparent Reference)';
    $targets[$k] = array(
      'name' => $name,
      'callback' => 'feeds_grandparentref_feeds_set_target',
      'description' => t('The CCK Node Reference !name of the node. Note that the source is not used here.', array('!name' => $name)),
      );
  }
}
/**
* Callback for mapping. Here is where the actual mapping happens.
*
* When the callback is invoked, $target contains the name of the field the
* user has decided to map to and $value contains the value of the feed item
* element the user has picked as a source.
*/
function feeds_grandparentref_feeds_set_target($node, $target, $value) {
  $field = isset($node->$target) ? $node->$target : array();
  
  // Do some checks here, don't set target if we can't feed granny
  $nid_parent = $node->feeds_node_item->feed_nid;
  $parent = node_load($nid_parent);
  $nid_grandparent = $parent->feeds_node_item->feed_nid;
  
  $field[0]['nid'] = $nid_grandparent;
  $node->$target = $field;
}